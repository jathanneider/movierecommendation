plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

// Ensure frontend subproject is included
evaluationDependsOn(':movie-recommendation-frontend')

import java.awt.Desktop

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.json:json:20210307'
}

tasks.register('runGUI', JavaExec) {
	mainClass = 'com.example.movierecommendation.gui.MovieRecommendationGUI'
	classpath = sourceSets.main.runtimeClasspath
}

bootRun.doFirst {
	try {
		def url = new URI("http://localhost:8080/")
		if (Desktop.isDesktopSupported()) {
			Thread.start {
				// Small delay to ensure server is up before browser tries to open
				sleep(3000)
				Desktop.desktop.browse(url)
			}
		} else {
			println "Automatic browser opening is not supported on this system."
		}
	} catch (Exception e) {
		println "Failed to open browser: ${e.message}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	dependsOn(':movie-recommendation-frontend:build')

	doFirst {
		copy {
			from project(':movie-recommendation-frontend').file('build')
			into "$projectDir/src/main/resources/static"
		}
	}
}
